/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GatekeeperOneAttack,
  GatekeeperOneAttackInterface,
} from "../GatekeeperOneAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051609e380380609e83398181016040526020811015602f57600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055603f80605f6000396000f3fe6080604052600080fdfea26469706673582212208544c3770dae04fccd8d590055a1658f927022a99fef8a688ff903a6de4249b164736f6c634300060c0033";

type GatekeeperOneAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatekeeperOneAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GatekeeperOneAttack__factory extends ContractFactory {
  constructor(...args: GatekeeperOneAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GatekeeperOneAttack> {
    return super.deploy(
      _address,
      overrides || {}
    ) as Promise<GatekeeperOneAttack>;
  }
  override getDeployTransaction(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_address, overrides || {});
  }
  override attach(address: string): GatekeeperOneAttack {
    return super.attach(address) as GatekeeperOneAttack;
  }
  override connect(signer: Signer): GatekeeperOneAttack__factory {
    return super.connect(signer) as GatekeeperOneAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatekeeperOneAttackInterface {
    return new utils.Interface(_abi) as GatekeeperOneAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GatekeeperOneAttack {
    return new Contract(address, _abi, signerOrProvider) as GatekeeperOneAttack;
  }
}
