/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { KingAttack, KingAttackInterface } from "../KingAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101d63803806101d68339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610171806100656000396000f3fe6080604052600436106100225760003560e01c80639e5faafc1461007957610074565b36610074576040805162461bcd60e51b815260206004820152600260248201527f4747000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080fd5b610081610083565b005b6000805460405173ffffffffffffffffffffffffffffffffffffffff9091169034908381818185875af1925050503d80600081146100dd576040519150601f19603f3d011682016040523d82523d6000602084013e6100e2565b606091505b5050905080610138576040805162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e64204574686572000000000000000000000000604482015290519081900360640190fd5b5056fea2646970667358221220739e99956eb816bf65066be4d447853d1e95bdb342fa8c46bbfdec0a619f8bb064736f6c634300060c0033";

type KingAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KingAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KingAttack__factory extends ContractFactory {
  constructor(...args: KingAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KingAttack> {
    return super.deploy(_address, overrides || {}) as Promise<KingAttack>;
  }
  override getDeployTransaction(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_address, overrides || {});
  }
  override attach(address: string): KingAttack {
    return super.attach(address) as KingAttack;
  }
  override connect(signer: Signer): KingAttack__factory {
    return super.connect(signer) as KingAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KingAttackInterface {
    return new utils.Interface(_abi) as KingAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KingAttack {
    return new Contract(address, _abi, signerOrProvider) as KingAttack;
  }
}
