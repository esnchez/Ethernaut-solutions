/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Delegate, DelegateInterface } from "../../Delegate.sol/Delegate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pwn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101503803806101508339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905560ec806100646000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063dd365b8b146066575b600080fd5b603d606e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b606c608a565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905556fea2646970667358221220aeee7cd31dc0386598be74775781b619dda70f8ac20debd9d190384f4acf674c64736f6c634300060c0033";

type DelegateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DelegateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Delegate__factory extends ContractFactory {
  constructor(...args: DelegateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Delegate> {
    return super.deploy(_owner, overrides || {}) as Promise<Delegate>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): Delegate {
    return super.attach(address) as Delegate;
  }
  override connect(signer: Signer): Delegate__factory {
    return super.connect(signer) as Delegate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DelegateInterface {
    return new utils.Interface(_abi) as DelegateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Delegate {
    return new Contract(address, _abi, signerOrProvider) as Delegate;
  }
}
