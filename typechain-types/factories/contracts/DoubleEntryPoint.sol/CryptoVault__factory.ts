/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CryptoVault,
  CryptoVaultInterface,
} from "../../../contracts/DoubleEntryPoint.sol/CryptoVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "latestToken",
        type: "address",
      },
    ],
    name: "setUnderlying",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sweptTokensRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103af3803806103af8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905561034a806100656000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631be19560146100515780633234a197146100795780636f307dc31461009d578063bdb2321f146100a5575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100cb565b005b61008161025e565b604080516001600160a01b039092168252519081900360200190f35b61008161026d565b610077600480360360208110156100bb57600080fd5b50356001600160a01b031661027c565b6001546001600160a01b038281169116141561012e576040805162461bcd60e51b815260206004820152601f60248201527f43616e2774207472616e7366657220756e6465726c79696e6720746f6b656e00604482015290519081900360640190fd5b600054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038085169363a9059cbb9391169184916370a08231916024808301926020929190829003018186803b15801561019c57600080fd5b505afa1580156101b0573d6000803e3d6000fd5b505050506040513d60208110156101c657600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561022f57600080fd5b505af1158015610243573d6000803e3d6000fd5b505050506040513d602081101561025957600080fd5b505050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6001546001600160a01b0316156102da576040805162461bcd60e51b815260206004820152600b60248201527f416c726561647920736574000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905556fea264697066735822122043d578edc684573f94fd250ca6a244469f99c8df6f89b0562448db3a763fa2d664736f6c634300060c0033";

type CryptoVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CryptoVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CryptoVault__factory extends ContractFactory {
  constructor(...args: CryptoVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CryptoVault> {
    return super.deploy(recipient, overrides || {}) as Promise<CryptoVault>;
  }
  override getDeployTransaction(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(recipient, overrides || {});
  }
  override attach(address: string): CryptoVault {
    return super.attach(address) as CryptoVault;
  }
  override connect(signer: Signer): CryptoVault__factory {
    return super.connect(signer) as CryptoVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CryptoVaultInterface {
    return new utils.Interface(_abi) as CryptoVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CryptoVault {
    return new Contract(address, _abi, signerOrProvider) as CryptoVault;
  }
}
