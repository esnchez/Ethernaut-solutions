/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  DenialAttack,
  DenialAttackInterface,
} from "../../contracts/DenialAttack";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604580601d6000396000f3fe608060405236600a57fe5b600080fdfea264697066735822122067dbd146b724fa781addabf1f190198723fe484816499a6b7448831fa9d586bd64736f6c634300060c0033";

type DenialAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DenialAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DenialAttack__factory extends ContractFactory {
  constructor(...args: DenialAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DenialAttack> {
    return super.deploy(overrides || {}) as Promise<DenialAttack>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DenialAttack {
    return super.attach(address) as DenialAttack;
  }
  override connect(signer: Signer): DenialAttack__factory {
    return super.connect(signer) as DenialAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DenialAttackInterface {
    return new utils.Interface(_abi) as DenialAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DenialAttack {
    return new Contract(address, _abi, signerOrProvider) as DenialAttack;
  }
}
