/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RecoveryAttack,
  RecoveryAttackInterface,
} from "../../contracts/RecoveryAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "callToDestroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161015b38038061015b8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905560f7806100646000396000f3fe608060405260043610601f5760003560e01c80632b0d5c0814602a576025565b36602557005b600080fd5b348015603557600080fd5b50603c603e565b005b60008054604080517ef55d9d000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff9092169262f55d9d9260248084019382900301818387803b15801560a857600080fd5b505af115801560bb573d6000803e3d6000fd5b5050505056fea2646970667358221220066b8969e7f6ec0eb3bb577b4d85def988173a35a580cf1bffae9bf66241eca164736f6c634300060c0033";

type RecoveryAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RecoveryAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RecoveryAttack__factory extends ContractFactory {
  constructor(...args: RecoveryAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RecoveryAttack> {
    return super.deploy(_address, overrides || {}) as Promise<RecoveryAttack>;
  }
  override getDeployTransaction(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_address, overrides || {});
  }
  override attach(address: string): RecoveryAttack {
    return super.attach(address) as RecoveryAttack;
  }
  override connect(signer: Signer): RecoveryAttack__factory {
    return super.connect(signer) as RecoveryAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RecoveryAttackInterface {
    return new utils.Interface(_abi) as RecoveryAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RecoveryAttack {
    return new Contract(address, _abi, signerOrProvider) as RecoveryAttack;
  }
}
