/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Motorbike,
  MotorbikeInterface,
} from "../../../contracts/Motorbike.sol/Motorbike";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102c13803806102c18339818101604052602081101561003357600080fd5b5051610049816101d1602090811b61007017901c565b6100845760405162461bcd60e51b815260040180806020018281038252602d815260200180610294602d913960400191505060405180910390fd5b806100ae7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6101d7565b80546001600160a01b039283166001600160a01b031990911617905560408051600481526024810182526020810180516001600160e01b031663204a7f0760e21b1781529151815160009486169382918083835b602083106101215780518252601f199092019160209182019101610102565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610181576040519150601f19603f3d011682016040523d82523d6000602084013e610186565b606091505b50509050806101ca576040805162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b604482015290519081900360640190fd5b50506101da565b3b151590565b90565b60ac806101e86000396000f3fe60806040526048602d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc604a565b5473ffffffffffffffffffffffffffffffffffffffff16604d565b005b90565b3660008037600080366000845af43d6000803e808015606b573d6000f35b3d6000fd5b3b15159056fea2646970667358221220550a2595635f717cf920c9d08e7ececc3ee456c3e0c63865ddb72f99e2e27c9d64736f6c634300060c0033455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374";

type MotorbikeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MotorbikeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Motorbike__factory extends ContractFactory {
  constructor(...args: MotorbikeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Motorbike> {
    return super.deploy(_logic, overrides || {}) as Promise<Motorbike>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, overrides || {});
  }
  override attach(address: string): Motorbike {
    return super.attach(address) as Motorbike;
  }
  override connect(signer: Signer): Motorbike__factory {
    return super.connect(signer) as Motorbike__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MotorbikeInterface {
    return new utils.Interface(_abi) as MotorbikeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Motorbike {
    return new Contract(address, _abi, signerOrProvider) as Motorbike;
  }
}
